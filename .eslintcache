[{"E:\\React\\weather_forecast\\src\\index.js":"1","E:\\React\\weather_forecast\\src\\reportWebVitals.js":"2","E:\\React\\weather_forecast\\src\\App.js":"3","E:\\React\\weather_forecast\\src\\container\\index.jsx":"4","E:\\React\\weather_forecast\\src\\components\\bar\\index.jsx":"5","E:\\React\\weather_forecast\\src\\helpers\\history.js":"6","E:\\React\\weather_forecast\\src\\components\\currents\\index.jsx":"7","E:\\React\\weather_forecast\\src\\helpers\\axios.js":"8","E:\\React\\weather_forecast\\src\\components\\constants\\apikey.js":"9","E:\\React\\weather_forecast\\src\\components\\citites\\index.js":"10","E:\\React\\weather_forecast\\src\\components\\location\\index.jsx":"11","E:\\React\\weather_forecast\\src\\components\\seven-day\\index.jsx":"12","E:\\React\\weather_forecast\\src\\common\\function.js":"13"},{"size":631,"mtime":1612173099049,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1612150067082,"results":"16","hashOfConfig":"15"},{"size":129,"mtime":1612258437973,"results":"17","hashOfConfig":"15"},{"size":877,"mtime":1612320710624,"results":"18","hashOfConfig":"15"},{"size":15329,"mtime":1612579432261,"results":"19","hashOfConfig":"15"},{"size":117,"mtime":1612171493623,"results":"20","hashOfConfig":"15"},{"size":11445,"mtime":1612578101478,"results":"21","hashOfConfig":"15"},{"size":288,"mtime":1612173995691,"results":"22","hashOfConfig":"15"},{"size":60,"mtime":1612234227519,"results":"23","hashOfConfig":"15"},{"size":30131,"mtime":1612231695516,"results":"24","hashOfConfig":"15"},{"size":13033,"mtime":1612515915235,"results":"25","hashOfConfig":"15"},{"size":6974,"mtime":1612583416463,"results":"26","hashOfConfig":"15"},{"size":533,"mtime":1612579137543,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"rpynzd",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\React\\weather_forecast\\src\\index.js",[],["57","58"],"E:\\React\\weather_forecast\\src\\reportWebVitals.js",[],"E:\\React\\weather_forecast\\src\\App.js",[],"E:\\React\\weather_forecast\\src\\container\\index.jsx",[],"E:\\React\\weather_forecast\\src\\components\\bar\\index.jsx",[],"E:\\React\\weather_forecast\\src\\helpers\\history.js",[],"E:\\React\\weather_forecast\\src\\components\\currents\\index.jsx",["59","60","61"],"import React from 'react';\r\nimport { Container, Input, TextField, InputAdornment } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { OWM_APIKEY } from '../constants/apikey';\r\nimport { Grid, makeStyles, fade, Paper } from '@material-ui/core';\r\nimport { Search, LocationOn, Cloud } from '@material-ui/icons';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { cities } from '../citites';\r\nimport * as moment from 'moment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    option: {\r\n        fontSize: 15,\r\n        fontWeight: '600',\r\n        '& > span': {\r\n            marginRight: 10,\r\n            fontSize: 18,\r\n        }\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        '& .MuiTextField-root': {\r\n            width: '100%',\r\n        },\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n        border: '1px solid white'\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    search: {\r\n        marginTop: theme.spacing(4),\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25)\r\n        },\r\n        width: '400px',\r\n        boxShadow: theme.shadows[3],\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0,1),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    city: {\r\n        fontSize: '2.5rem',\r\n        textShadow: '1px 1px black',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '1.2rem',\r\n        }\r\n    },\r\n    cloud: {\r\n        fontSize: 140,\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            fontSize: '6.5rem'\r\n        }\r\n    },\r\n    paper: {\r\n        width: 200,\r\n        height: 200\r\n    },\r\n    autoComplete: {\r\n        width: 600,\r\n        marginTop: theme.spacing(10),\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            width: 320\r\n        }\r\n    },\r\n    textField: {\r\n        border: 0,\r\n        position: 'relative',\r\n        margin: 0,\r\n        padding: 0\r\n    },\r\n    locationName: {\r\n        marginTop: theme.spacing(2),\r\n        height: 80,\r\n    },\r\n    tempure: {\r\n        height: 200,\r\n    },\r\n    parameter: {\r\n        height: 200,\r\n        backgroundColor: 'rgba(85, 154, 194, .5)',\r\n        borderRadius: '5px'\r\n\r\n    },\r\n    cloudInfo: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        padding: '40px 0',\r\n        position: 'relative',\r\n        flexDirection: 'column',\r\n    },\r\n    celcius: {\r\n        fontSize: '110px',\r\n        textShadow: '1px 1px black',\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            fontSize: '1.5rem'\r\n        }\r\n    },\r\n    cloudName: {\r\n        fontSize: '1.2rem',\r\n        padding: '0 10px'\r\n    },\r\n    extract: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'flex-start',\r\n        padding: '10px',\r\n        width: '100%'\r\n    },\r\n    extractItem: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        width: '25%',\r\n        marginTop: '10px',\r\n        padding: '1px',\r\n        '& > p': {\r\n            fontSize: '1.7rem',\r\n            [theme.breakpoints.down('sm')]: {\r\n                fontSize: '1.1rem',\r\n            }\r\n        }\r\n    },\r\n    datetime: {\r\n        fontSize: '1.8rem',\r\n        textShadow: '1px 1px black',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '0.9rem',\r\n        }\r\n    }\r\n}))\r\n\r\nconst Current = props => {\r\n    const classes = useStyles();\r\n    const [current, setCurrent] = React.useState(null);\r\n    const [cityId, setCityId] = React.useState(document.cookie.split(';').find(v => v.indexOf('cityId') > -1) ? document.cookie.split(';').find(v => v.indexOf('cityId') > -1).split('=')[1]: 1581129)\r\n    React.useEffect(() => {\r\n        getWeather(cityId);\r\n    }, [cityId])\r\n    const createCookie = (cookieName, cookieValue, hourExpire) => {\r\n        let date = new Date();\r\n        date.setTime(date.getTime() + hourExpire*60*60*1000);\r\n        document.cookie = cookieName + \" = \" + cookieValue + '; expires = ' + date.toGMTString();\r\n    }\r\n    const changeCity = (event, value) => {\r\n        setCityId(value.id);\r\n        createCookie('cityId', value.id, 5)\r\n        console.log(document.cookie.split(';'))\r\n    }\r\n    const renderIcon = (key = 'weather', data) => {\r\n        const url = `http://openweathermap.org/img/wn/${data[key][0].icon}@2x.png`;\r\n        return <img src={url} alt=\"icon\" />\r\n    }\r\n    const getWeather = async cityId => {\r\n        try {\r\n            const promise = await fetch(`http://api.openweathermap.org/data/2.5/weather?id=${cityId}&appid=${OWM_APIKEY}&lang=vi`);\r\n            const response = await promise.json();\r\n    \r\n            setCurrent(response);\r\n        } catch(error) {\r\n            console.log(error)\r\n        }\r\n    } \r\n    const renderCityCountry = (key, data) => {\r\n        return <React.Fragment>\r\n            <h2 className={classes.city}>{data[key] + ',' + data['sys'].country}</h2>\r\n        </React.Fragment>\r\n    }\r\n    const renderTempureorMain = (key, data) => {\r\n        if (key === 'weather') {\r\n            return <React.Fragment key={key}>\r\n                {\r\n                    \r\n                    data[key].map(d =><h3 key={d.id.toString()} className={classes.cloudName}>{d?.description}</h3>)\r\n                }\r\n            </React.Fragment>\r\n        } else if(key === 'main') {\r\n            return <React.Fragment key={key}>\r\n               <h3 className={classes.celcius}>{Math.floor(data[key]?.temp - 273.15)} &#8451;</h3>\r\n            </React.Fragment>\r\n        }\r\n    }\r\n    const renderParameter = (key, data) => {\r\n        if (key === 'sys') {\r\n            return <React.Fragment key={key}>\r\n                <div className={classes.extractItem}>\r\n                    <p>Sunrise</p>\r\n                    <p>{moment(data[key]?.sunrise).format('hh:mm')}</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Sunset</p>\r\n                    <p>{moment(data[key]?.sunset).format('hh:mm')}</p>\r\n                </div>\r\n            </React.Fragment>\r\n        } else if (key === 'main') {\r\n            return <React.Fragment key={key}>\r\n                <div className={classes.extractItem}>\r\n                    <p>Feels like</p>\r\n                    <p>{Math.floor(data[key]?.feels_like - 273.15)} &#8451;</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>High</p>\r\n                    <p>{Math.floor(data[key]?.temp_max - 273.15)} &#8451;</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Low</p>\r\n                    <p>{Math.floor(data[key]?.temp_min - 273.15)} &#8451;</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Humidity</p>\r\n                    <p>{data[key]?.humidity}%</p>\r\n                </div>\r\n            </React.Fragment>\r\n        } else if (key === 'wind') {\r\n            return <React.Fragment key={key}>\r\n                <div className={classes.extractItem}>\r\n                    <p>Wind</p>\r\n                    <p>{data[key]?.speed}mph</p>\r\n                </div>\r\n            </React.Fragment>\r\n        }\r\n        return null\r\n    }\r\n    const renderDate = (key = 'dt', data) => {\r\n        return <h3 className={classes.datetime}>{moment(new Date()).format('DD MMM YYYY')}</h3>\r\n    }\r\n    return (\r\n        current && <Container maxWidth=\"lg\">\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <Grid item xs={12} md={12}>\r\n                    <Grid container justify=\"center\">\r\n                        <Autocomplete \r\n                        id=\"cities\"\r\n                        disableClearable\r\n                        autoHighlight\r\n                        options={cities}\r\n                        onChange={changeCity}\r\n                        className={classes.autoComplete}\r\n                        classes ={{option: classes.option}}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.name}\r\n                        renderOption={option => (<React.Fragment>\r\n                            <span><LocationOn /></span>\r\n                            {option.name}\r\n                        </React.Fragment>)}\r\n                        renderInput={(params) => {\r\n                            params.InputProps.startAdornment = (\r\n                                <>\r\n                                    <InputAdornment position=\"start\"><Search /></InputAdornment>\r\n                                    {params.InputProps.startAdornment}\r\n                                </>\r\n                            )\r\n                                \r\n                                return <TextField\r\n                                    {...params}\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"Tìm kiếm địa chỉ\"\r\n                                    label=\"Địa chỉ\"\r\n                                    InputProps={{ ...params.InputProps, className: classes.inputRoot, type: 'search' }}\r\n                                />\r\n                        }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className={classes.locationName} item xs={12} md={12}>\r\n                    <Grid container justify=\"flex-start\" direction=\"column\">\r\n                        {renderCityCountry('name', current)}\r\n                        {renderDate('dt', current)}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className={classes.tempure} item xs={12} md={6}>\r\n                    <Grid container justify=\"center\" alignItems=\"center\">\r\n                        <Grid item xs={4} md={3}>\r\n                            {/* <Cloud className={classes.cloud} /> */}\r\n                            {renderIcon('weather',current)}\r\n                        </Grid>\r\n                        <Grid item xs={8} md={9}>\r\n                            <div className={classes.cloudInfo}>\r\n                                {renderTempureorMain('main', current)}\r\n                                {renderTempureorMain('weather', current)}\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className={classes.parameter} item xs={12} md={6}>\r\n                    <Grid container justify=\"flex-start\">\r\n                        <div className={classes.extract}>\r\n                            {\r\n                                Object.keys(current).map(key => renderParameter(key, current))\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(Current);","E:\\React\\weather_forecast\\src\\helpers\\axios.js",[],"E:\\React\\weather_forecast\\src\\components\\constants\\apikey.js",[],"E:\\React\\weather_forecast\\src\\components\\citites\\index.js",[],"E:\\React\\weather_forecast\\src\\components\\location\\index.jsx",["62","63","64"],"import React from 'react';\r\nimport { Container, Grid, Card, CardContent, makeStyles, Typography, MobileStepper, useMediaQuery, useTheme, Button } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { cities } from '../citites';\r\nimport { OWM_APIKEY } from '../constants/apikey';\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons';\r\nimport * as moment from 'moment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    locationCard: {\r\n        minWidth: '45%',\r\n        height: '400px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '300px'\r\n        },\r\n        position: 'relative'\r\n    },\r\n    cardContent: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        backgroundColor: 'rgba(85, 154, 194, .5)'\r\n    },\r\n    cardPara: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    title: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: 12,\r\n        }\r\n    },\r\n    celcius: {\r\n        fontSize: '2rem',\r\n        textShadow: '1px 1px black',\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            fontSize: '1rem'\r\n        }\r\n    },\r\n    cloudName: {\r\n        fontSize: '.5rem',\r\n        padding: '0 10px'\r\n    },\r\n    parameter: {\r\n        height: 150,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 100\r\n        },\r\n        width: '100%'\r\n    },\r\n    extract: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'flex-start',\r\n        padding: '10px',\r\n        width: '100%'\r\n    },\r\n    extractItem: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        width: '25%',\r\n        marginTop: '10px',\r\n        '& > p': {\r\n            fontSize: '.9rem',\r\n            [theme.breakpoints.down('sm')]: {\r\n                fontSize: '.5rem',\r\n            }\r\n        }\r\n    },\r\n    hourlyCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            height: 120,\r\n            '& > img': {\r\n                height: 60,\r\n                width: 60\r\n            }\r\n        },\r\n    },\r\n    hourlyCardTemperature: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n        width: '100%'\r\n    },\r\n    celciusStepper: {\r\n        fontSize: '1.5rem',\r\n        textShadow: '1px 1px black',\r\n        [theme.breakpoints.between('xs', 'sm')]: {\r\n            fontSize: '1rem'\r\n        }\r\n    },\r\n    cloudStep: {\r\n        fontSize: '.5rem',\r\n        padding: '0 10px'\r\n    },\r\n\r\n}))\r\n\r\nconst SpecificLocation = (props) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const match = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [cityId, setCityId] = React.useState(document.cookie.split(';').find(v => v.indexOf('cityId') > -1) ? document.cookie.split(';').find(v => v.indexOf('cityId') > -1).split('=')[1]: 1581129)\r\n    const [spcLocation, setSpcLocation] = React.useState(localStorage.getItem('temp') ? JSON.parse(localStorage.getItem('temp')): null);\r\n    // React.useEffect(() => {\r\n    //     getWeatherSpecificLocation(cityId)\r\n    // }, [cityId])\r\n    const getWeatherSpecificLocation = async cityId => {\r\n        // localStorage.removeItem('temp')\r\n        const city = cities.find(c => c.id === +cityId);\r\n        try {\r\n            const result = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${city.coord.lat}&lon=${city.coord.lon}&exclude=minutely&appid=${OWM_APIKEY}&lang=vi`);\r\n            let response = await result.json();\r\n            delete response.lat\r\n            delete response.lon\r\n            delete response.timezone\r\n            delete response.timezone_offset\r\n            setSpcLocation(response)\r\n            localStorage.setItem('temp', JSON.stringify(response))\r\n        } catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    const next = () => {\r\n        setActiveStep((prevStep) => prevStep + 1)\r\n    }\r\n    const prev = () => {\r\n        setActiveStep((prevStep) => prevStep - 1)\r\n    }\r\n    const renderIcon = (keyParent, key = 'weather', data) => {\r\n        const url = `http://openweathermap.org/img/wn/${data[keyParent][key][0].icon}@2x.png`;\r\n        return <img src={url} alt=\"icon\" />\r\n    }\r\n    const renderIconWithSize = (size = 2, key = 'weather', data) => {\r\n        const url = `http://openweathermap.org/img/wn/${data[key][0].icon}@${size}x.png`;\r\n        return <img src={url} alt=\"icon\" />\r\n    }\r\n    const renderHourTemperature = data => {\r\n        return <h4 className={classes.celciusStepper}>{Math.floor(data['temp'] - 273.15) } &#8451;</h4>\r\n    }\r\n    const renderUVandHum = (data) => {\r\n        return <div className={classes.hourlyCardTemperature}>\r\n            <p>{data['uvi']}</p>\r\n            <p>{data['humidity']}%</p>\r\n        </div>\r\n    }\r\n    const renderStepper = (activeIndex = 0, arrayStepper = [[]]) => {\r\n        const groupActive = arrayStepper[activeIndex];\r\n        const numberCard = Math.floor(12 / groupActive.length);\r\n        if (groupActive.length > 0) {\r\n            return <Grid container justify=\"space-around\" alignItems=\"flex-start\">\r\n                {\r\n                    groupActive.map((gr, id) => <Grid key={id} item xs={6} sm={6} md={numberCard} lg={numberCard}>\r\n                        <div className={classes.hourlyCard}>\r\n                            {renderIconWithSize(2, 'weather', gr)}\r\n                            {renderHourTemperature(gr)}\r\n                            {renderUVandHum(gr)}\r\n                        </div>\r\n                    </Grid>)\r\n                }\r\n            </Grid>\r\n        }\r\n    }\r\n    const groupByNumItem = (data = [], match) => {\r\n        let result = [];\r\n        if (match) {\r\n            for (let i =0; i< data.length; i+=4) {\r\n                result.push(data.slice(i, i+4))\r\n            }\r\n        } else {\r\n            for (let i =0; i< data.length; i+=8) {\r\n                result.push(data.slice(i, i+8))\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    const renderDot = (data = [[]] ) => {\r\n        return (\r\n            <MobileStepper\r\n            style={{width: '100%', background: 'transparent'}}\r\n            steps={data.length}\r\n            position=\"static\"\r\n            variant=\"dots\"\r\n            activeStep={activeStep}\r\n            nextButton={\r\n              <Button size=\"small\" style={{color: '#fff'}} onClick={next} disabled={activeStep === data.length - 1}>\r\n                Next\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n              </Button>\r\n            }\r\n            backButton={\r\n              <Button style={{color: '#fff'}} size=\"small\" onClick={prev} disabled={activeStep === 0}>\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                Back\r\n              </Button>\r\n            }\r\n          />\r\n        )\r\n    }\r\n    const renderByKey = (key, data) => {\r\n        if (key === 'current') {\r\n            return (\r\n                <Card className={classes.cardContent} key={key}>\r\n                    <CardContent className={classes.cardPara}>\r\n                        <Typography variant=\"h4\" className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            {key}\r\n                        </Typography>\r\n                        <Grid container justify=\"center\" alignItems=\"center\">\r\n                            <Grid item xs={4} md={1}>\r\n                                {/* <Cloud className={classes.cloud} /> */}\r\n                                {renderIcon(key, 'weather',data)}\r\n                            </Grid>\r\n                        <Grid item xs={8} md={11}>\r\n                                <div className={classes.cloudInfo}>\r\n                                    {renderTemperatureorMain(key, 'temp', data)}\r\n                                    {renderTemperatureorMain(key, 'weather', data)}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className={classes.parameter} item xs={12} md={12}>\r\n                            <Grid container justify=\"flex-start\">\r\n                                <div className={classes.extract}>\r\n                                    {\r\n                                        Object.keys(data).map(key => renderParameter(key, data))\r\n                                    }\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            )\r\n        } else if (key === 'hourly') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Typography variant=\"h5\">\r\n                        48 hours\r\n                    </Typography>\r\n                    {\r\n                      renderStepper(activeStep, groupByNumItem(data[key], match))\r\n                    }\r\n                    {\r\n                        renderDot(groupByNumItem(data[key], match))\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n    const renderTemperatureorMain = (keyParent, keyChildren, data) => {\r\n        if (keyChildren === 'weather') {\r\n            return <React.Fragment key={keyChildren}>\r\n                {\r\n                    \r\n                    data[keyParent][keyChildren].map(d =><h3 key={d.id.toString()} className={classes.cloudName}>{d?.description}</h3>)\r\n                }\r\n            </React.Fragment>\r\n        } else if(keyChildren === 'temp') {\r\n            return <React.Fragment key={keyChildren}>\r\n               <h3 className={classes.celcius}>{Math.floor(data[keyParent]?.temp - 273.15)} &#8451;</h3>\r\n            </React.Fragment>\r\n        }\r\n    }\r\n    const renderParameter = (key, data) => {\r\n        if (key === 'current') {\r\n            return <React.Fragment key={key}>\r\n                <div className={classes.extractItem}>\r\n                    <p>Feels like</p>\r\n                    <p>{Math.floor(data[key]?.feels_like - 273.15)} &#8451;</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Sunrise</p>\r\n                    <p>{moment(data[key]?.sunrise).format('hh:mm')}</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Sunset</p>\r\n                    <p>{moment(data[key]?.sunset).format('hh:mm')}</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Wind</p>\r\n                    <p>{data[key]?.wind_speed }mph</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Humidity </p>\r\n                    <p>{data[key]?.humidity}%</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>UV </p>\r\n                    <p>{data[key]?.uvi}</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Cloud </p>\r\n                    <p>{data[key]?.clouds}%</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Pressure </p>\r\n                    <p>{data[key]?.pressure} hPa</p>\r\n                </div>\r\n            </React.Fragment>\r\n        } else if (key === 'hourly') {\r\n            <React.Fragment key={key}>\r\n                <div className={classes.extractItem}>\r\n                    <p>Feels like</p>\r\n                    <p>{Math.floor(data[key]?.feels_like - 273.15)} &#8451;</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Wind</p>\r\n                    <p>{data[key]?.wind_speed }mph</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>Humidity </p>\r\n                    <p>{data[key]?.humidity}%</p>\r\n                </div>\r\n                <div className={classes.extractItem}>\r\n                    <p>UV </p>\r\n                    <p>{data[key]?.uvi}</p>\r\n                </div>\r\n            </React.Fragment>\r\n        }\r\n        return null\r\n    }\r\n    console.log(spcLocation)\r\n    return (\r\n        spcLocation && <Container maxWidth=\"lg\">\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <Grid className={classes.locationCard} item xs={12} sm={12} md={12}>\r\n                    {\r\n                        Object.keys(spcLocation).map(key => renderByKey(key, spcLocation))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(SpecificLocation);","E:\\React\\weather_forecast\\src\\components\\seven-day\\index.jsx",["65","66"],"E:\\React\\weather_forecast\\src\\common\\function.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":2,"column":21,"nodeType":"73","messageId":"74","endLine":2,"endColumn":26},{"ruleId":"71","severity":1,"message":"75","line":5,"column":34,"nodeType":"73","messageId":"74","endLine":5,"endColumn":39},{"ruleId":"71","severity":1,"message":"76","line":6,"column":30,"nodeType":"73","messageId":"74","endLine":6,"endColumn":35},{"ruleId":"71","severity":1,"message":"77","line":113,"column":12,"nodeType":"73","messageId":"74","endLine":113,"endColumn":18},{"ruleId":"71","severity":1,"message":"78","line":113,"column":20,"nodeType":"73","messageId":"74","endLine":113,"endColumn":29},{"ruleId":"71","severity":1,"message":"79","line":118,"column":11,"nodeType":"73","messageId":"74","endLine":118,"endColumn":37},{"ruleId":"71","severity":1,"message":"77","line":69,"column":12,"nodeType":"73","messageId":"74","endLine":69,"endColumn":18},{"ruleId":"71","severity":1,"message":"80","line":71,"column":19,"nodeType":"73","messageId":"74","endLine":71,"endColumn":27},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'Cloud' is defined but never used.","'cityId' is assigned a value but never used.","'setCityId' is assigned a value but never used.","'getWeatherSpecificLocation' is assigned a value but never used.","'setDaily' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]